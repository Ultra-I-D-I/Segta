/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package segta.formularios;

import java.awt.Component;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import segta.controladores.PoolJpaController;
import segta.clases.Color;
import segta.clases.Exportar;
import segta.clases.Pool;
import segta.clases.Sector;
import segta.clases.Tambor;
import segta.clases.TimestampCellRenderer;
import segta.controladores.TamborJpaController;

/**
 *
 * @author Quales Group
 */
public class JDialogPool extends javax.swing.JDialog {

    /**
     * Creates new form JDialogPool
     */
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("SegTAPU");
    TamborJpaController controladorT = new TamborJpaController(emf);
    PoolJpaController controladorP = new PoolJpaController(emf);
    Exportar archivoExcel;

    public JDialogPool(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
//        jTablePool.getColumnModel().getColumn(0).setCellRenderer(new TimestampCellRenderer());
        jTablePool.getColumnModel().getColumn(1).setCellRenderer(tcr);
        jTablePool.getColumnModel().getColumn(2).setCellRenderer(tcr);
        jTablePool.getColumnModel().getColumn(3).setCellRenderer(tcr);
        jTablePool.getColumnModel().getColumn(4).setCellRenderer(tcr);

        jTableClasificado.getColumnModel().getColumn(0).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(1).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(2).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(3).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(4).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(5).setCellRenderer(tcr);
        jTableClasificado.getColumnModel().getColumn(6).setCellRenderer(tcr);

        tamborList.clear();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel11 = new javax.swing.JLabel();
        SegTAPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SegTAPU").createEntityManager();
        poolQuery = java.beans.Beans.isDesignTime() ? null : SegTAPUEntityManager.createQuery("SELECT p FROM Pool p");
        poolList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(poolQuery.getResultList());
        tamborQuery = java.beans.Beans.isDesignTime() ? null : SegTAPUEntityManager.createQuery("SELECT t FROM Tambor t WHERE t.estado='descargado' and t.recepcion is not null");
        tamborList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(tamborQuery.getResultList());
        sectorQuery = java.beans.Beans.isDesignTime() ? null : SegTAPUEntityManager.createQuery("SELECT s FROM Sector s ORDER BY s.nombre DESC");
        sectorList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : sectorQuery.getResultList();
        colorQuery = java.beans.Beans.isDesignTime() ? null : SegTAPUEntityManager.createQuery("SELECT c FROM Color c");
        colorList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : colorQuery.getResultList();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClasificado = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePool = new javax.swing.JTable();
        dCCBuscarFecha = new datechooser.beans.DateChooserCombo();
        jBBuscarPool = new javax.swing.JButton();
        jTFNumeroBusca = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTFNumeroPool = new javax.swing.JTextField();
        jBAgregarTambor = new javax.swing.JButton();
        jBSacarTambor = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTFHumedad = new javax.swing.JTextField();
        jTFDextrina = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButtonClasificar = new javax.swing.JButton();
        jTFHmf = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jRBNegativo = new javax.swing.JRadioButton();
        jRBPositivo = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jBVolver = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jBNuevoPool = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jLabel11.setText("NUMERO DE POOL");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("POOLES");

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tamborList, jTableClasificado);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numero}"));
        columnBinding.setColumnName("Numero");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idProveedor.razonSocial}"));
        columnBinding.setColumnName("Apicultor");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idPool.numero}"));
        columnBinding.setColumnName("Pool");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idSector.nombre}"));
        columnBinding.setColumnName("Grupo");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idColor.color}"));
        columnBinding.setColumnName("Color");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${humedad}"));
        columnBinding.setColumnName("Humedad");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${estadoDextrina}"));
        columnBinding.setColumnName("Dextrina");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableClasificado);

        jTablePool.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, poolList, jTablePool);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fecha}"));
        columnBinding.setColumnName("Fecha");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numero}"));
        columnBinding.setColumnName("Numero");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${humedad}"));
        columnBinding.setColumnName("Humedad");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${estadoDextrina}"));
        columnBinding.setColumnName("Dextrina");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dextrina}"));
        columnBinding.setColumnName("% Dext.");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hmf}"));
        columnBinding.setColumnName("HMF");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTablePool.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePoolMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTablePool);

        dCCBuscarFecha.setWeekStyle(datechooser.view.WeekDaysStyle.SHORT);
        try {
            dCCBuscarFecha.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }
        dCCBuscarFecha.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));

        jBBuscarPool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/buscar icono.png"))); // NOI18N
        jBBuscarPool.setText("Buscar");
        jBBuscarPool.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBBuscarPool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarPoolActionPerformed(evt);
            }
        });

        jTFNumeroBusca.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTFNumeroBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFNumeroBuscaActionPerformed(evt);
            }
        });

        jLabel12.setText("NUMERO DE TAMBOR");

        jTFNumeroPool.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jBAgregarTambor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/add icono.png"))); // NOI18N
        jBAgregarTambor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarTamborActionPerformed(evt);
            }
        });

        jBSacarTambor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/borrar.png"))); // NOI18N
        jBSacarTambor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSacarTamborActionPerformed(evt);
            }
        });

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Humedad");

        jTFHumedad.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTFDextrina.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTFDextrina.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("Dextrina");

        jButtonClasificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/report2.png"))); // NOI18N
        jButtonClasificar.setText("Registrar Análisis del Pool");
        jButtonClasificar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonClasificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClasificarActionPerformed(evt);
            }
        });

        jTFHmf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("HMF");

        buttonGroup1.add(jRBNegativo);
        jRBNegativo.setSelected(true);
        jRBNegativo.setText("Negativo");
        jRBNegativo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRBNegativoMouseClicked(evt);
            }
        });

        buttonGroup1.add(jRBPositivo);
        jRBPositivo.setText("Positivo");
        jRBPositivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRBPositivoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFHumedad, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRBNegativo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBPositivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFDextrina, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFHmf, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButtonClasificar, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(301, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(jTFHumedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jRBNegativo)
                    .addComponent(jRBPositivo)
                    .addComponent(jTFDextrina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTFHmf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClasificar))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Numero de Pool");

        jBVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/volver icono.png"))); // NOI18N
        jBVolver.setText("VOLVER");
        jBVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVolverActionPerformed(evt);
            }
        });

        jLabel3.setText("Tambores del Pool");

        jBNuevoPool.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBNuevoPool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/segta/imagenes/add icono.png"))); // NOI18N
        jBNuevoPool.setText("Nuevo Pool");
        jBNuevoPool.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBNuevoPool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoPoolActionPerformed(evt);
            }
        });

        jLabel4.setText("Pooles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 948, Short.MAX_VALUE)
                        .addComponent(jBVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jBNuevoPool, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTFNumeroPool, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dCCBuscarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jBBuscarPool, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTFNumeroBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBAgregarTambor, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jBSacarTambor, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dCCBuscarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFNumeroPool, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(jBBuscarPool))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBNuevoPool)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jBAgregarTambor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFNumeroBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBSacarTambor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jBVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void actualizarTabla() {

        jTFHumedad.setText("");
        jTFDextrina.setText("");
        jTFHmf.setText("");

        tamborList.clear();
        SegTAPUEntityManager.clear();
        Pool PoolSel = (Pool) poolList.get(jTablePool.getSelectedRow());
        Query ql;
        ql = SegTAPUEntityManager.createQuery("SELECT t FROM Tambor t WHERE t.idPool =:pPool ");
        ql.setParameter("pPool", PoolSel);
        tamborQuery = java.beans.Beans.isDesignTime() ? null : ql;
        tamborList.addAll(tamborQuery.getResultList());

    }
    private void jBBuscarPoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarPoolActionPerformed

        Date fecha = null;
        Query ql;
        String queryTxt = "SELECT p FROM Pool p WHERE 1=1 ";

        if (!this.dCCBuscarFecha.getText().isEmpty()) {
            try {
                String fechaS = this.dCCBuscarFecha.getText();
                fecha = (Date) new SimpleDateFormat("dd/MM/yyyy").parse(fechaS);

            } catch (ParseException ex) {
                Logger.getLogger(jDialogDescargas.class.getName()).log(Level.SEVERE, null, ex);
                fecha = null;
            }

            if (fecha != null) {
                queryTxt = queryTxt + " AND  p.fecha = :pFecha ";
            }
        }

        if (!this.jTFNumeroPool.getText().isEmpty()) {
            int numeroPool = Integer.parseInt(this.jTFNumeroPool.getText());
            queryTxt = queryTxt + " AND p.numero like " + numeroPool + "";
        }

        ql = SegTAPUEntityManager.createQuery(queryTxt);
        if (fecha != null) {
            ql.setParameter("pFecha", fecha);
        }

        poolQuery = java.beans.Beans.isDesignTime() ? null : ql;
        poolList.clear();
        poolList.addAll(poolQuery.getResultList());
    }//GEN-LAST:event_jBBuscarPoolActionPerformed

    private void jTFNumeroBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFNumeroBuscaActionPerformed
        jBAgregarTamborActionPerformed(evt);
    }//GEN-LAST:event_jTFNumeroBuscaActionPerformed

    private void jBNuevoPoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoPoolActionPerformed

        int ultimop;

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        String fechaS = dtf.format(LocalDateTime.now());
        Pool nuevoPool = new Pool();
        try {
            Date fechaD = (Date) new SimpleDateFormat("yyyy/MM/dd").parse(fechaS);
            nuevoPool.setFecha(fechaD);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Error al registrar la fecha", "Información", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(jDialogDescargas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(JDialogRecepcion.class.getName()).log(Level.SEVERE, null, ex);
        }
        Object resultado = SegTAPUEntityManager.createNativeQuery("SELECT IFNULL(MAX(p.numero),0) FROM Pool p where p.fecha = curdate()").getSingleResult();
        ultimop = Integer.parseInt(resultado.toString());
        ultimop++;;

        nuevoPool.setNumero(ultimop);
        controladorP.create(nuevoPool);
        JOptionPane.showMessageDialog(null, "Pool número " + ultimop + " creado", "Información", JOptionPane.INFORMATION_MESSAGE);
        poolList.clear();
        poolList.addAll(poolQuery.getResultList());
    }//GEN-LAST:event_jBNuevoPoolActionPerformed

    private void jButtonClasificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClasificarActionPerformed

        if (this.jTablePool.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un pool");
            jTablePool.requestFocus();

        } else {

            Pool PoolSel = (Pool) poolList.get(jTablePool.getSelectedRow());

            float humedad = 0;
            float dextrina = 0;
            float hmf = 0;
            String estadoDex = "Negativo";
            if (jRBPositivo.isSelected()) {
                estadoDex = "Positivo";
            }
            //convierto la humedad en Float
            try {
                humedad = Float.parseFloat(jTFHumedad.getText());
            } catch (Exception ex) {
                humedad = 100;
            }
            //convierto la dextrina en Float
            if (jRBPositivo.isSelected()) {
                try {
                    dextrina = Float.parseFloat(jTFDextrina.getText());
                } catch (Exception ex) {
                    dextrina = 100;
                }
            }
            //convierto el HMF en Float
            try {
                hmf = Float.parseFloat(jTFHmf.getText());
            } catch (Exception ex) {
                hmf = 100;
            }

            if (jTFHumedad.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Completar el campo Humedad");
                jTFHumedad.requestFocus();
            } else if (humedad > 99.9) {
                JOptionPane.showMessageDialog(null, "Dato Humedad incorrecto");
                jTFHumedad.requestFocus();
            } else if (jRBPositivo.isSelected() && (jTFDextrina.getText().isEmpty() || dextrina > 99.9)) {

                if (jTFDextrina.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Completar el campo Dextrina");
                    jTFDextrina.requestFocus();
                } else if (dextrina > 99.9) {
                    JOptionPane.showMessageDialog(null, "Dato Dextrina incorrecto");
                    jTFDextrina.requestFocus();
                }
            } else if (jTFHmf.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Completar el campo Hmf");
                jTFHmf.requestFocus();
            } else if (hmf > 99.9) {
                JOptionPane.showMessageDialog(null, "Dato HMF incorrecto");
                jTFHmf.requestFocus();

            } else {

                PoolSel.setDextrina(dextrina);
                PoolSel.setEstadoDextrina(estadoDex);
                PoolSel.setHumedad(humedad);
                PoolSel.setHmf(hmf);
                try {
                    controladorP.edit(PoolSel);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el Pool");
                }

                for (Tambor tambor : PoolSel.getTamborCollection()) {

                    tambor.setHumedad(humedad);
                    tambor.setDextrina(dextrina);
                    tambor.setEstadoDextrina(estadoDex);

                    try {
                        controladorT.edit(tambor);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Error al actualizar un tambor");
                    }
                }
                JOptionPane.showMessageDialog(null, "Datos del Pool registrados");
                actualizarTabla();
            }
        }


    }//GEN-LAST:event_jButtonClasificarActionPerformed

    private void jBAgregarTamborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarTamborActionPerformed

//      
        if (this.jTablePool.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un pool");
            jTablePool.requestFocus();

        } else {
            int numero = 0;
            Tambor tamborSel = new Tambor();
            Pool PoolSel = (Pool) poolList.get(jTablePool.getSelectedRow());
            if (!jTFNumeroBusca.getText().isEmpty()) {
                try {
                    SegTAPUEntityManager.clear();
                    numero = Integer.parseInt(jTFNumeroBusca.getText());
                    String q = "SELECT t FROM Tambor t WHERE t.estado='descargado' and t.recepcion is not null and t.numero = " + numero;
                    tamborQuery = java.beans.Beans.isDesignTime() ? null : SegTAPUEntityManager.createQuery(q);
                    tamborSel = (Tambor) tamborQuery.getSingleResult();
                    if (tamborSel.getIdColor() == null) {
                        JOptionPane.showMessageDialog(null, "El tambor no tiene asignado Color", "Ingrese otro Tambor", JOptionPane.WARNING_MESSAGE);
                        jTFNumeroBusca.requestFocus();
                        jTFNumeroBusca.setText("");
                    } else if (tamborSel.getIdPool() != null) {
                        JOptionPane.showMessageDialog(null, "El tambor ya se encuentra registrado en otro Pool ", "Ingrese otro Tambor", JOptionPane.WARNING_MESSAGE);
                        jTFNumeroBusca.requestFocus();
                        jTFNumeroBusca.setText("");
                    } else if (tamborList.contains(tamborSel)) {
                        jTFNumeroBusca.requestFocus();
                        jTFNumeroBusca.setText("");
                        JOptionPane.showMessageDialog(null, "El tambor ya se encuentra registrado ", "Ingrese otro Tambor", JOptionPane.WARNING_MESSAGE);
                    } else {
                        tamborSel.setIdPool(PoolSel);
                        controladorT.edit(tamborSel);
                        actualizarTabla();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se encuentra el tambor: debe estar recepcionado y sin clasificar", "Alerta", JOptionPane.WARNING_MESSAGE);
                }
            }

            jTFNumeroBusca.requestFocus();
            jTFNumeroBusca.setText("");
        }
    }//GEN-LAST:event_jBAgregarTamborActionPerformed

    private void jTablePoolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePoolMouseClicked

        /*tamborList.clear();
        SegTAPUEntityManager.clear();
        Pool PoolSel = (Pool) poolList.get(jTablePool.getSelectedRow());
        Query ql;
        ql = SegTAPUEntityManager.createQuery("SELECT t FROM Tambor t WHERE t.idPool =:pPool ");
        ql.setParameter("pPool", PoolSel);
        tamborQuery = java.beans.Beans.isDesignTime() ? null : ql;
        tamborList.addAll(tamborQuery.getResultList());*/
        actualizarTabla();

    }//GEN-LAST:event_jTablePoolMouseClicked

    private void jBSacarTamborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSacarTamborActionPerformed

        if (this.jTableClasificado.getSelectedRowCount() != 1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un tambor");
            jTableClasificado.requestFocus();

        } else {
            Tambor tamborSel = (Tambor) tamborList.get(jTableClasificado.getSelectedRow());
            if (tamborSel.getEstado().equals("descargado")) {
                tamborSel.setHumedad(null);
                tamborSel.setDextrina(null);
                tamborSel.setEstadoDextrina(null);
                tamborSel.setIdPool(null);

                try {
                    controladorT.edit(tamborSel);
                    actualizarTabla();
                    JOptionPane.showMessageDialog(null, "Tambor quitado del Pool");

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error al quitar el tambor ", "", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No se puede quitar el tambor ", "El tambo ya se encuentra clasificado", JOptionPane.WARNING_MESSAGE);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jBSacarTamborActionPerformed

    private void jBVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVolverActionPerformed
        this.processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));        // TODO add your handling code here:
    }//GEN-LAST:event_jBVolverActionPerformed

    private void jRBPositivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRBPositivoMouseClicked
        jTFDextrina.setEnabled(true);
    }//GEN-LAST:event_jRBPositivoMouseClicked

    private void jRBNegativoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRBNegativoMouseClicked
        // TODO add your handling code here:
        jTFDextrina.setText("");
        jTFDextrina.setEnabled(false);
    }//GEN-LAST:event_jRBNegativoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogPool.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogPool.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogPool.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogPool.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogPool dialog = new JDialogPool(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager SegTAPUEntityManager;
    private javax.swing.ButtonGroup buttonGroup1;
    private java.util.List<segta.clases.Color> colorList;
    private javax.persistence.Query colorQuery;
    private datechooser.beans.DateChooserCombo dCCBuscarFecha;
    private javax.swing.JButton jBAgregarTambor;
    private javax.swing.JButton jBBuscarPool;
    private javax.swing.JButton jBNuevoPool;
    private javax.swing.JButton jBSacarTambor;
    private javax.swing.JButton jBVolver;
    private javax.swing.JButton jButtonClasificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRBNegativo;
    private javax.swing.JRadioButton jRBPositivo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTFDextrina;
    private javax.swing.JTextField jTFHmf;
    private javax.swing.JTextField jTFHumedad;
    private javax.swing.JTextField jTFNumeroBusca;
    private javax.swing.JTextField jTFNumeroPool;
    private javax.swing.JTable jTableClasificado;
    private javax.swing.JTable jTablePool;
    private java.util.List<segta.clases.Pool> poolList;
    private javax.persistence.Query poolQuery;
    private java.util.List<segta.clases.Sector> sectorList;
    private javax.persistence.Query sectorQuery;
    private java.util.List<segta.clases.Tambor> tamborList;
    private javax.persistence.Query tamborQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
